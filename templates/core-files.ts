/**
 * Template files for Claude Discord Bot
 * Core implementation files that will be copied during initialization
 */

export const TEMPLATE_FILES = {
  // Main bot entry point
  "src/bot.ts": `#!/usr/bin/env -S deno run --allow-all
/**
 * Claude Discord Bot - Main entry point
 * Generated by Claude Discord Bot CLI
 */

import { load } from "jsr:@std/dotenv";
import { Client, GatewayIntentBits, Message, TextChannel } from "discord.js";
import process from "node:process";
import { TmuxSessionManager } from "./tmux.ts";
import { ClaudeCodeExecutor } from "./claude.ts";
import { DiscordAPIBridge } from "./discord-api.ts";
import { SimpleLogger } from "./logger.ts";
import {
  detectProjectContext,
  formatDuration,
  parseArgs,
  showHelp,
  validateEnvironment,
} from "./utils.ts";
import type { BotConfig, BotStats, LogLevel, SpecialCommand } from "./types.ts";

export class ClaudeDiscordBot {
  private config: BotConfig;
  private client: Client;
  private tmuxManager: TmuxSessionManager;
  private claudeExecutor: ClaudeCodeExecutor;
  private logger: SimpleLogger;
  private targetChannelId = "";
  private stats: BotStats;
  private specialCommands: SpecialCommand[];
  private responseMonitorInterval?: number;

  constructor(config: BotConfig) {
    this.config = config;
    this.logger = new SimpleLogger(config.logLevel);
    this.tmuxManager = new TmuxSessionManager(config.tmuxSessionName, this.logger);
    this.claudeExecutor = new ClaudeCodeExecutor(
      this.tmuxManager,
      config.projectContext,
      this.logger,
    );

    this.client = new Client({
      intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
      ],
    });

    this.stats = {
      startTime: new Date(),
      messagesProcessed: 0,
      commandsExecuted: 0,
      lastActivity: new Date(),
      sessionStatus: { exists: false, uptime: "未開始" },
    };

    this.specialCommands = this.initializeSpecialCommands();
    this.setupEventHandlers();
  }

  // ... (rest of the implementation would be copied from the original bot.ts)
  
  private initializeSpecialCommands(): SpecialCommand[] {
    return [
      {
        name: "/status",
        description: "Show bot and session status",
        handler: async (messageUnknown: unknown) => {
          const message = messageUnknown as Message;
          const sessionStatus = await this.claudeExecutor.getSessionStatus();
          const uptime = formatDuration(Date.now() - this.stats.startTime.getTime());

          const statusMessage = [
            \`📊 **Claude Discord Bot ステータス**\`,
            \`\`,
            \`🏠 **プロジェクト**: \${this.config.projectContext.projectName}\`,
            \`📁 **パス**: \${this.config.projectContext.rootPath}\`,
            \`🛠️ **言語**: \${this.config.projectContext.language}\`,
            \`📦 **フレームワーク**: \${this.config.projectContext.framework || "なし"}\`,
            \`\`,
            \`🔄 **Claudeセッション**: \${sessionStatus.exists ? "✅ 起動中" : "❌ 停止中"}\`,
            \`⏰ **最終活動**: \${sessionStatus.uptime}\`,
            \`\`,
            \`🤖 **Bot稼働時間**: \${uptime}\`,
            \`📨 **処理メッセージ数**: \${this.stats.messagesProcessed}\`,
            \`⚡ **実行コマンド数**: \${this.stats.commandsExecuted}\`,
          ].join("\\n");

          await message.reply(statusMessage);
          this.stats.commandsExecuted++;
        },
      },
      // Add other special commands...
    ];
  }

  async start(): Promise<void> {
    this.logger.info("Starting Claude Discord Bot...");
    this.logger.info(\`Project: \${this.config.projectContext.projectName}\`);
    this.logger.info(\`Channel: #\${this.config.channelName}\`);

    try {
      await this.client.login(this.config.discordToken);
    } catch (error) {
      this.logger.error(
        \`Failed to login to Discord: \${error instanceof Error ? error.message : String(error)}\`,
      );
      throw error;
    }
  }
}

/**
 * Main function
 */
async function main(): Promise<void> {
  // Load environment variables
  await load({ export: true });

  // Parse command line arguments
  const args = parseArgs(Deno.args);

  // Show help if requested
  if (args.help) {
    showHelp();
    return;
  }

  // Validate environment
  const envValidation = validateEnvironment();
  if (!envValidation.valid) {
    console.error("❌ Missing required environment variables:");
    for (const missing of envValidation.missing) {
      console.error(\`  - \${missing}\`);
    }
    console.error("\\nPlease check .env.example for reference");
    Deno.exit(1);
  }

  // Get channel name
  const channelName = args.channelName ||
    Deno.env.get("DISCORD_CHANNEL_NAME") ||
    "claude";

  // Detect project context
  const projectContext = await detectProjectContext(Deno.cwd());

  // Create bot configuration
  const config: BotConfig = {
    discordToken: Deno.env.get("DISCORD_BOT_TOKEN")!,
    guildId: Deno.env.get("GUILD_ID")!,
    authorizedUserId: Deno.env.get("AUTHORIZED_USER_ID")!,
    channelName,
    projectContext,
    tmuxSessionName: Deno.env.get("TMUX_SESSION_NAME") || "claude-main",
    logLevel: (args.logLevel || Deno.env.get("LOG_LEVEL") || "info") as LogLevel,
  };

  // Create and start bot
  try {
    const bot = new ClaudeDiscordBot(config);
    await bot.start();
  } catch (error) {
    console.error(
      \`❌ Failed to start bot: \${error instanceof Error ? error.message : String(error)}\`,
    );
    Deno.exit(1);
  }
}

// Run main function if this is the main module
if (import.meta.main) {
  main().catch((error) => {
    console.error("Unhandled error:", error);
    Deno.exit(1);
  });
}
`,

  // Discord response helper
  "src/discord-respond.ts": `#!/usr/bin/env -S deno run --allow-write --allow-read

// Discord Response Helper for Claude Code
// Usage: ./discord-respond.ts "Your message here"

const message = Deno.args[0];
const channelId = Deno.args[1] || await Deno.readTextFile("/tmp/claude-discord-channel.txt").catch(() => "");

if (!message) {
  console.error("Usage: ./discord-respond.ts <message> [channelId]");
  Deno.exit(1);
}

const response = {
  content: message,
  channelId: channelId,
  timestamp: new Date().toISOString(),
  type: "text"
};

await Deno.writeTextFile(
  "/tmp/claude-discord-response.json",
  JSON.stringify(response, null, 2)
);

console.log("Response queued for Discord");
`,

  // Deno configuration
  "deno.json": `{
  "name": "claude-discord-bot",
  "version": "1.0.0",
  "description": "Discord bot for Claude Code integration",
  "exports": "./src/bot.ts",
  "nodeModulesDir": "auto",
  "compilerOptions": {
    "allowJs": true,
    "strict": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true
  },
  "imports": {
    "discord.js": "npm:discord.js@14",
    "@std/dotenv": "jsr:@std/dotenv@^0.225.0",
    "@std/assert": "jsr:@std/assert@^1.0.2",
    "@std/testing": "jsr:@std/testing@^1.0.0"
  },
  "tasks": {
    "start": "deno run --allow-all src/bot.ts",
    "dev": "deno run --allow-all --watch src/bot.ts",
    "test": "deno test --allow-all",
    "check": "deno check src/*.ts",
    "fmt": "deno fmt",
    "lint": "deno lint"
  },
  "fmt": {
    "useTabs": false,
    "lineWidth": 100,
    "indentWidth": 2,
    "semiColons": true,
    "singleQuote": false,
    "proseWrap": "preserve"
  },
  "lint": {
    "rules": {
      "tags": ["recommended"]
    }
  },
  "test": {
    "include": ["src/**/*.test.ts", "tests/**/*.ts"]
  }
}
`,

  // README template
  "README.md": `# Claude Discord Bot

Discord bot for seamless Claude Code integration in your development workflow.

## Features

- 🤖 Direct Claude Code execution from Discord
- 📁 Automatic project context detection
- 🔧 tmux session management
- 📊 Bot status monitoring
- 🛠️ Special commands for control

## Quick Start

### 1. Prerequisites

- [Deno](https://deno.land/) runtime
- [tmux](https://github.com/tmux/tmux) session manager
- [Claude Code CLI](https://docs.anthropic.com/en/docs/claude-code) authenticated
- Discord Bot Token

### 2. Setup

Generated by Claude Discord Bot CLI. Your environment is ready to go!

### 3. Configuration

Edit \`.env\` file with your Discord credentials:

\`\`\`env
DISCORD_BOT_TOKEN=your_bot_token_here
GUILD_ID=your_guild_id_here
AUTHORIZED_USER_ID=your_user_id_here
DISCORD_CHANNEL_NAME=claude
TMUX_SESSION_NAME=claude-main
LOG_LEVEL=info
\`\`\`

### 4. Run

\`\`\`bash
deno task start
\`\`\`

## Usage

### Basic Commands

Post messages in the configured Discord channel to interact with Claude:

- Regular messages → Claude Code execution
- \`/status\` → Show bot status
- \`/restart\` → Restart Claude session
- \`/help\` → Show available commands

### Direct Response

From within Claude Code, send responses directly to Discord:

\`\`\`bash
./src/discord-respond.ts "Your response message"
\`\`\`

## Development

\`\`\`bash
# Development mode with auto-reload
deno task dev

# Run tests
deno task test

# Format code
deno task fmt

# Lint code
deno task lint
\`\`\`

## License

MIT License - Feel free to use and modify as needed.
`,

  // Environment template
  ".env.example": `# Claude Discord Bot Configuration Template
DISCORD_BOT_TOKEN=your_discord_bot_token_here
GUILD_ID=your_discord_guild_id_here  
AUTHORIZED_USER_ID=your_discord_user_id_here
DISCORD_CHANNEL_NAME=claude
TMUX_SESSION_NAME=claude-main
LOG_LEVEL=info
`,
};