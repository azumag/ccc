/**
 * Tests for CLI prompt generation to prevent regression
 * Ensures that CLI flags are properly reflected in generated prompts
 */

import { assertEquals, assertStringIncludes } from "@std/assert";

// Mock BotConfig interface
interface BotConfig {
  discordToken: string;
  guildId: string;
  authorizedUserId?: string;
  channelName: string;
  tmuxSessionName: string;
  logLevel: string;
  enableUltraThink?: boolean;
  orchestratorMode?: boolean;
  useDangerouslySkipPermissions?: boolean;
  enableResume?: boolean;
  enableContinue?: boolean;
  autoCommit?: boolean;
  autoPush?: boolean;
  progressUpdate?: boolean;
  progressInterval?: string;
}

/**
 * Extract and test the enhanced prompt generation logic
 * This replicates the logic from cli.ts processMessage method
 */
function generateEnhancedPrompt(
  prompt: string,
  config: BotConfig,
): string {
  const projectPrefix = config.orchestratorMode ? "/project:orchestrator\n\n" : "";
  const ultrathinkText = config.enableUltraThink ? "\n\nultrathink\n" : "";

  // Add auto-commit/push instructions to prompt
  let autoGitInstructions = "";
  if (config.autoCommit || config.autoPush) {
    const actions = [];
    if (config.autoCommit) {
      actions.push(
        'git add . && git commit -m "task: Auto commit on task completion\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>"',
      );
    }
    if (config.autoPush) actions.push("git push");
    autoGitInstructions = `\n\nÊ≥®ÊÑè: „Çø„Çπ„ÇØÂÆå‰∫ÜÂæå„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n${
      actions.join(" && ")
    }\n`;
  }

  // Add progress update instructions to prompt
  let progressInstructions = "";
  if (config.progressUpdate) {
    const interval = config.progressInterval || "1m";
    progressInstructions = `\n\nÈáçË¶Å: Èï∑ÊôÇÈñì„Çø„Çπ„ÇØ„ÅÆÂ†¥Âêà„ÄÅ${interval}ÈñìÈöî„Åæ„Åü„ÅØÈáçË¶Å„Å™ÈÄ≤Êçó„Åå„ÅÇ„Çã„Åü„Å≥„Å´‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅßÈÄî‰∏≠ÁµåÈÅé„ÇíÂ†±Âëä„Åó„Å¶„Åè„Å†„Åï„ÅÑ:
claude-discord-bot send-to-discord "ÈÄ≤Êçó: [ÁèæÂú®„ÅÆ‰ΩúÊ•≠ÂÜÖÂÆπ„Å®ÈÄ≤Ë°åÁä∂Ê≥Å]" --session ${config.tmuxSessionName}

ÈÄ≤ÊçóÂ†±Âëä„ÅÆ‰æã:
- "ÈÄ≤Êçó: „Éï„Ç°„Ç§„É´Ëß£ÊûêÂÆå‰∫Ü„ÄÅ3/10„Éï„Ç°„Ç§„É´Âá¶ÁêÜÊ∏à„Åø"
- "ÈÄ≤Êçó: „ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠„ÄÅ2/5„Çπ„Ç§„Éº„ÉàÂÆå‰∫Ü"
- "ÈÄ≤Êçó: „Éá„Éó„É≠„Ç§‰∏≠„ÄÅ„Éì„É´„ÉâÂÆå‰∫Ü„Éª„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã"
`;
  }

  return `${projectPrefix}${prompt}${ultrathinkText}${autoGitInstructions}${progressInstructions}

ÈáçË¶Å: ÂÆüË°åÁµêÊûú„ÇÑÂøúÁ≠î„Çí‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅßDiscord„Å´ÈÄÅ‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑ:
claude-discord-bot send-to-discord "„ÅÇ„Å™„Åü„ÅÆÂøúÁ≠îÂÜÖÂÆπ" --session ${config.tmuxSessionName}`;
}

Deno.test("Enhanced Prompt Generation - Base case", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
  };

  const prompt = "Test message";
  const result = generateEnhancedPrompt(prompt, config);

  assertStringIncludes(result, "Test message");
  assertStringIncludes(result, "--session test-session");
  assertEquals(result.includes("/project:orchestrator"), false);
  assertEquals(result.includes("ultrathink"), false);
  assertEquals(result.includes("Ê≥®ÊÑè: „Çø„Çπ„ÇØÂÆå‰∫ÜÂæå"), false);
});

Deno.test("Enhanced Prompt Generation - ultrathink flag", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    enableUltraThink: true,
  };

  const prompt = "Test message";
  const result = generateEnhancedPrompt(prompt, config);

  assertStringIncludes(result, "Test message");
  assertStringIncludes(result, "\n\nultrathink\n");
});

Deno.test("Enhanced Prompt Generation - orchestrator mode", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    orchestratorMode: true,
  };

  const prompt = "Test message";
  const result = generateEnhancedPrompt(prompt, config);

  assertStringIncludes(result, "/project:orchestrator\n\n");
  assertStringIncludes(result, "Test message");
});

Deno.test("Enhanced Prompt Generation - auto-commit flag", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    autoCommit: true,
  };

  const prompt = "Test message";
  const result = generateEnhancedPrompt(prompt, config);

  assertStringIncludes(result, "Ê≥®ÊÑè: „Çø„Çπ„ÇØÂÆå‰∫ÜÂæå„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:");
  assertStringIncludes(result, "git add . && git commit");
});

Deno.test("Enhanced Prompt Generation - auto-push flag", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    autoPush: true,
  };

  const prompt = "Test message";
  const result = generateEnhancedPrompt(prompt, config);

  assertStringIncludes(result, "Ê≥®ÊÑè: „Çø„Çπ„ÇØÂÆå‰∫ÜÂæå„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:");
  assertStringIncludes(result, "git push");
});

Deno.test("Enhanced Prompt Generation - all flags combined", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    enableUltraThink: true,
    orchestratorMode: true,
    autoCommit: true,
    autoPush: true,
  };

  const prompt = "Complex test message";
  const result = generateEnhancedPrompt(prompt, config);

  // Check orchestrator prefix
  assertStringIncludes(result, "/project:orchestrator\n\n");

  // Check original prompt
  assertStringIncludes(result, "Complex test message");

  // Check ultrathink text
  assertStringIncludes(result, "\n\nultrathink\n");

  // Check auto git instructions
  assertStringIncludes(result, "Ê≥®ÊÑè: „Çø„Çπ„ÇØÂÆå‰∫ÜÂæå„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:");
  assertStringIncludes(result, "git add . && git commit");
  assertStringIncludes(result, "git push");
});

Deno.test("Enhanced Prompt Generation - prompt order verification", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    enableUltraThink: true,
    orchestratorMode: true,
    autoCommit: true,
  };

  const prompt = "Order test";
  const result = generateEnhancedPrompt(prompt, config);

  // Verify the order: orchestrator prefix, then prompt, then ultrathink, then git instructions, then command
  const orchestratorIndex = result.indexOf("/project:orchestrator");
  const promptIndex = result.indexOf("Order test");
  const ultrathinkIndex = result.indexOf("ultrathink");
  const gitInstructionsIndex = result.indexOf("Ê≥®ÊÑè: „Çø„Çπ„ÇØÂÆå‰∫ÜÂæå");
  const commandIndex = result.indexOf("claude-discord-bot send-to-discord");

  assertEquals(
    orchestratorIndex < promptIndex,
    true,
    "Orchestrator prefix should come before prompt",
  );
  assertEquals(promptIndex < ultrathinkIndex, true, "Prompt should come before ultrathink");
  assertEquals(
    ultrathinkIndex < gitInstructionsIndex,
    true,
    "Ultrathink should come before git instructions",
  );
  assertEquals(
    gitInstructionsIndex < commandIndex,
    true,
    "Git instructions should come before command",
  );
});

Deno.test("Enhanced Prompt Generation - session name escaping", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "special-session-name_123",
    logLevel: "info",
  };

  const prompt = "Session test";
  const result = generateEnhancedPrompt(prompt, config);

  assertStringIncludes(result, "--session special-session-name_123");
});

Deno.test("Enhanced Prompt Generation - progress-update flag", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    progressUpdate: true,
  };

  const prompt = "Test message";
  const result = generateEnhancedPrompt(prompt, config);

  assertStringIncludes(result, "ÈáçË¶Å: Èï∑ÊôÇÈñì„Çø„Çπ„ÇØ„ÅÆÂ†¥Âêà„ÄÅ1mÈñìÈöî„Åæ„Åü„ÅØÈáçË¶Å„Å™ÈÄ≤Êçó„Åå„ÅÇ„Çã„Åü„Å≥„Å´");
  assertStringIncludes(result, "ÈÄ≤Êçó: [ÁèæÂú®„ÅÆ‰ΩúÊ•≠ÂÜÖÂÆπ„Å®ÈÄ≤Ë°åÁä∂Ê≥Å]");
  assertStringIncludes(result, "ÈÄ≤ÊçóÂ†±Âëä„ÅÆ‰æã:");
  assertStringIncludes(result, "- \"ÈÄ≤Êçó: „Éï„Ç°„Ç§„É´Ëß£ÊûêÂÆå‰∫Ü„ÄÅ3/10„Éï„Ç°„Ç§„É´Âá¶ÁêÜÊ∏à„Åø\"");
});

Deno.test("Enhanced Prompt Generation - progress-update with custom interval", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    progressUpdate: true,
    progressInterval: "30s",
  };

  const prompt = "Test message";
  const result = generateEnhancedPrompt(prompt, config);

  assertStringIncludes(result, "ÈáçË¶Å: Èï∑ÊôÇÈñì„Çø„Çπ„ÇØ„ÅÆÂ†¥Âêà„ÄÅ30sÈñìÈöî„Åæ„Åü„ÅØÈáçË¶Å„Å™ÈÄ≤Êçó„Åå„ÅÇ„Çã„Åü„Å≥„Å´");
  assertStringIncludes(result, "--session test-session");
});

Deno.test("Enhanced Prompt Generation - all flags including progress", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    enableUltraThink: true,
    orchestratorMode: true,
    autoCommit: true,
    autoPush: true,
    progressUpdate: true,
    progressInterval: "2m",
  };

  const prompt = "Complete test message";
  const result = generateEnhancedPrompt(prompt, config);

  // Check all components are present
  assertStringIncludes(result, "/project:orchestrator\n\n");
  assertStringIncludes(result, "Complete test message");
  assertStringIncludes(result, "\n\nultrathink\n");
  assertStringIncludes(result, "Ê≥®ÊÑè: „Çø„Çπ„ÇØÂÆå‰∫ÜÂæå„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:");
  assertStringIncludes(result, "git add . && git commit");
  assertStringIncludes(result, "git push");
  assertStringIncludes(result, "ÈáçË¶Å: Èï∑ÊôÇÈñì„Çø„Çπ„ÇØ„ÅÆÂ†¥Âêà„ÄÅ2mÈñìÈöî„Åæ„Åü„ÅØÈáçË¶Å„Å™ÈÄ≤Êçó„Åå„ÅÇ„Çã„Åü„Å≥„Å´");
  assertStringIncludes(result, "ÈÄ≤ÊçóÂ†±Âëä„ÅÆ‰æã:");
});

Deno.test("Enhanced Prompt Generation - progress order verification", () => {
  const config: BotConfig = {
    discordToken: "test-token",
    guildId: "test-guild",
    channelName: "test-channel",
    tmuxSessionName: "test-session",
    logLevel: "info",
    enableUltraThink: true,
    orchestratorMode: true,
    autoCommit: true,
    progressUpdate: true,
  };

  const prompt = "Order test with progress";
  const result = generateEnhancedPrompt(prompt, config);

  // Verify the order: orchestrator prefix, prompt, ultrathink, git instructions, progress instructions, command
  const orchestratorIndex = result.indexOf("/project:orchestrator");
  const promptIndex = result.indexOf("Order test with progress");
  const ultrathinkIndex = result.indexOf("ultrathink");
  const gitInstructionsIndex = result.indexOf("Ê≥®ÊÑè: „Çø„Çπ„ÇØÂÆå‰∫ÜÂæå");
  const progressInstructionsIndex = result.indexOf("ÈáçË¶Å: Èï∑ÊôÇÈñì„Çø„Çπ„ÇØ„ÅÆÂ†¥Âêà");
  const commandIndex = result.indexOf("claude-discord-bot send-to-discord");

  assertEquals(orchestratorIndex < promptIndex, true, "Orchestrator prefix should come before prompt");
  assertEquals(promptIndex < ultrathinkIndex, true, "Prompt should come before ultrathink");
  assertEquals(ultrathinkIndex < gitInstructionsIndex, true, "Ultrathink should come before git instructions");
  assertEquals(gitInstructionsIndex < progressInstructionsIndex, true, "Git instructions should come before progress instructions");
  assertEquals(progressInstructionsIndex < commandIndex, true, "Progress instructions should come before command");
});
